export declare class SmartBuffer {
    private readonly _bytes;
    private _offset;
    constructor(_bytes: Uint8Array);
    seek(newOffset: number): void;
    get size(): number;
    get offset(): number;
    static ofSize(size: number): SmartBuffer;
    static ofBinaryString(str: string): SmartBuffer;
    static ofBase64String(str: string): SmartBuffer;
    static ofHexString(str: string): SmartBuffer;
    static ofWords(words: number[]): SmartBuffer;
    static ofUTF8String(str: string): SmartBuffer;
    toHexString(): string;
    toBinaryString(): string;
    toBase64String(): string;
    toWordsArray(): number[];
    toUTF8String(): string;
    writeUint8(val: number): void;
    writeUint16(val: number): void;
    writeUint32(val: number): void;
    writeBytes(val: Uint8Array): void;
    writeBuffer(val: SmartBuffer): void;
    writeBytes8Length(val: Uint8Array): void;
    writeBuffer8Length(val: SmartBuffer): void;
    writeBytes16Length(val: Uint8Array): void;
    writeBuffer16Length(val: SmartBuffer): void;
    writeBytes32Length(val: Uint8Array): void;
    writeBuffer32Length(val: SmartBuffer): void;
    readUint8(): number;
    readUint16(): number;
    readUint32(): number;
    readBytes(length: number): Uint8Array;
    readBuffer(length: number): SmartBuffer;
    readBytes8Length(): Uint8Array;
    readBuffer8Length(): SmartBuffer;
    readBytes16Length(): Uint8Array;
    readBuffer16Length(): SmartBuffer;
    readBytes32Length(): Uint8Array;
    readBuffer32Length(): SmartBuffer;
    get bytes(): Uint8Array;
}
